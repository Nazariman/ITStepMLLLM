import os
import re
import json
import hashlib
from pathlib import Path
from typing import List, Dict

import streamlit as st
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma


# ===================== –ö–û–ù–§–Ü–ì (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —É —Å–∞–π–¥–±–∞—Ä—ñ) =====================
DEFAULT_PERSIST_DIR = "chroma_db"
DEFAULT_COLLECTION = "lesson_rag_docs"
DEFAULT_IDS_JSON = "data/lesson_rag/ids.json"
DEFAULT_EMB_MODEL = "sentence-transformers/all-MiniLM-L6-v2"


# ===================== –£–¢–ò–õ–Ü–¢–ò =====================
def get_vectorstore(persist_dir: str, collection_name: str, model_name: str):
    embeddings = HuggingFaceEmbeddings(model_name=model_name)
    vs = Chroma(
        collection_name=collection_name,
        embedding_function=embeddings,
        persist_directory=persist_dir,
    )
    return vs

def split_into_blocks(text: str) -> List[str]:
    """–†–æ–∑–±–∏–≤–∞—î —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏ –∑–∞ –¥–≤–æ–º–∞+ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ —Ä—è–¥–∫–∞–º–∏."""
    parts = re.split(r"(?:\r?\n)\s*(?:\r?\n)\s*(?:\r?\n)+", text)
    return [p.strip() for p in parts if p.strip()]

def title_of_block(block: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä—à–∏–π –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ —è–∫ –Ω–∞–∑–≤—É –±–ª–æ–∫—É."""
    for line in block.splitlines():
        t = line.strip()
        if t:
            return t[:180]
    return "Untitled"

def stable_id_from_text(text: str) -> str:
    """–î–µ—Ç–µ—Ä–º—ñ–Ω—ñ—Å—Ç–∏—á–Ω–∏–π ID: MD5 –≤—ñ–¥ –≤–º—ñ—Å—Ç—É –±–ª–æ–∫—É."""
    return hashlib.md5(text.encode("utf-8")).hexdigest()

def append_ids_json(ids_path: Path, items: List[Dict]):
    payload = {"items": []}
    if ids_path.exists():
        try:
            payload = json.loads(ids_path.read_text(encoding="utf-8"))
            if not isinstance(payload, dict) or "items" not in payload or not isinstance(payload["items"], list):
                payload = {"items": []}
        except Exception:
            payload = {"items": []}
    payload["items"].extend(items)
    ids_path.parent.mkdir(parents=True, exist_ok=True)
    ids_path.write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding="utf-8")

def add_blocks_to_db(vs: Chroma, blocks: List[str], filename_for_meta: str, ids_json_path: Path):
    texts, metadatas, ids = [], [], []
    for b in blocks:
        bid = stable_id_from_text(b)
        metadatas.append({"file": filename_for_meta, "block_title": title_of_block(b)})
        texts.append(b)
        ids.append(bid)

    # upsert (Chroma —Å–∞–º –æ–Ω–æ–≤–∏—Ç—å/–¥–æ–¥–∞—Å—Ç—å –∑–∞ id)
    vs.add_texts(texts=texts, metadatas=metadatas, ids=ids)
    vs.persist()

    # —É JSON –ø–∏—à–µ–º–æ –ª–∏—à–µ –Ω–æ–≤—ñ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
    items = [{"id": i, "file": m["file"], "block_title": m["block_title"]} for i, m in zip(ids, metadatas)]
    append_ids_json(Path(ids_json_path), items)

    return ids, metadatas


# ===================== UI =====================
st.set_page_config(page_title="Vector DB Admin", page_icon="üß©", layout="wide")
st.title("üß© Vector DB Admin (Chroma)")

# –°–∞–π–¥–±–∞—Ä ‚Äî –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
with st.sidebar:
    st.header("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–î")
    persist_dir = st.text_input("Chroma persist_directory", DEFAULT_PERSIST_DIR)
    collection_name = st.text_input("Collection name", DEFAULT_COLLECTION)
    ids_json = st.text_input("–®–ª—è—Ö –¥–æ ids.json", DEFAULT_IDS_JSON)
    emb_model = st.text_input("–ú–æ–¥–µ–ª—å –µ–º–±–µ–¥—ñ–Ω–≥—ñ–≤", DEFAULT_EMB_MODEL)
    st.caption("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü–µ–π –Ω–∞–±—ñ—Ä –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç–æ–º—É, —â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∑–∞–Ω—è—Ç—Ç—ñ.")

vs = get_vectorstore(persist_dir, collection_name, emb_model)

tab_get, tab_add, tab_search = st.tabs(["üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç", "‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç", "üîé –ü–æ—à—É–∫ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)"])

# -------------------- –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç --------------------
with tab_get:
    st.subheader("–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞ ID")
    get_id = st.text_input("–í–≤–µ–¥—ñ—Ç—å ID –¥–æ–∫—É–º–µ–Ω—Ç–∞", "")
    if st.button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç"):
        if not get_id:
            st.warning("–í–≤–µ–¥—ñ—Ç—å ID.")
        else:
            try:
                # –£ Chroma –Ω–µ–º–∞—î –ø—Ä—è–º–æ–≥–æ get_by_id —É LangChain-–æ–±–≥–æ—Ä—Ç—Ü—ñ ‚Äî –∞–ª–µ –º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ similarity –Ω–∞ —Å–∞–º ID (—è–∫ –∫–æ—Å—Ç–∏–ª—å),
                # –∞–±–æ —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∫–ª—ñ—î–Ω—Ç. –ù–∞–π–ø—Ä–æ—Å—Ç—ñ—à–µ: –ø–æ—à—É–∫ exact id —á–µ—Ä–µ–∑ raw API:
                collection = vs._collection  # low-level chromadb.Collection
                res = collection.get(ids=[get_id])
                ids_ret = res.get("ids", [])
                if ids_ret:
                    meta = res.get("metadatas", [{}])[0] or {}
                    cont = res.get("documents", [""])[0]
                    st.success("–î–æ–∫—É–º–µ–Ω—Ç –∑–Ω–∞–π–¥–µ–Ω–æ.")
                    st.write(f"**ID:** `{get_id}`")
                    st.write(f"**–§–∞–π–ª:** {meta.get('file', '‚Äî')}")
                    st.write(f"**–ù–∞–∑–≤–∞ –±–ª–æ–∫—É:** {meta.get('block_title', '‚Äî')}")
                    st.text_area("–í–º—ñ—Å—Ç", cont, height=300)
                else:
                    st.error("–î–æ–∫—É–º–µ–Ω—Ç –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            except Exception as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# -------------------- –î–æ–¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç --------------------
with tab_add:
    st.subheader("–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç")
    st.markdown("**–í–∞—Ä—ñ–∞–Ω—Ç 1:** –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ TXT‚Äë—Ñ–∞–π–ª")
    up = st.file_uploader("–û–±–µ—Ä—ñ—Ç—å TXT", type=["txt"])
    st.markdown("**–í–∞—Ä—ñ–∞–Ω—Ç 2:** –≤—Å—Ç–∞–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É")
    manual_text = st.text_area("–¢–µ–∫—Å—Ç (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)", height=200, placeholder="–í—Å—Ç–∞–≤—Ç–µ —Å—é–¥–∏ —Ç–µ–∫—Å—Ç, —è–∫—â–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç–µ —Ñ–∞–π–ª‚Ä¶")
    filename_for_meta = st.text_input("–ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö", value="manual_input.txt")

    if st.button("–î–æ–¥–∞—Ç–∏ –¥–æ –ë–î"):
        try:
            raw_text = ""
            used_filename = filename_for_meta

            if up is not None:
                raw_text = up.read().decode("utf-8", errors="ignore")
                used_filename = up.name
            elif manual_text.strip():
                raw_text = manual_text
            else:
                st.warning("–î–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∞–±–æ —Ç–µ–∫—Å—Ç.")
                st.stop()

            blocks = split_into_blocks(raw_text) if ("\n\n\n" in raw_text or "\r\n\r\n\r\n" in raw_text) else [raw_text.strip()]
            if not blocks:
                st.warning("–ü–æ—Ä–æ–∂–Ω—ñ–π –≤–º—ñ—Å—Ç.")
                st.stop()

            ids, metas = add_blocks_to_db(vs, blocks, used_filename, ids_json)
            st.success(f"–î–æ–¥–∞–Ω–æ {len(ids)} –±–ª–æ–∫(–∏/—ñ–≤).")
            with st.expander("–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–¥–∞–Ω—ñ ID"):
                for i, m in zip(ids, metas):
                    st.write(f"- `{i}` ‚Äî **{m.get('block_title','Untitled')}** (—Ñ–∞–π–ª: {m.get('file','‚Äî')})")

        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# -------------------- –ü–æ—à—É–∫ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞) --------------------
with tab_search:
    st.subheader("–°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)")
    q = st.text_input("–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç", value="What actions are prohibited by Google Terms of Service?")
    k = st.slider("–°–∫—ñ–ª—å–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ–∫–∞–∑–∞—Ç–∏", 1, 10, 5)
    if st.button("–®—É–∫–∞—Ç–∏"):
        try:
            docs = vs.similarity_search(q, k=k)
            if not docs:
                st.info("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            else:
                for d in docs:
                    meta = d.metadata or {}
                    st.markdown(f"**{meta.get('block_title','Untitled')}**  \n*–§–∞–π–ª:* {meta.get('file','‚Äî')}")
                    st.code(d.page_content[:1200])
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
